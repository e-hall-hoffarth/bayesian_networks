predict_smoke(alice, probit) - predict_smoke(beth, probit)
predict(probit, alice)
coef<-probit$coefficients[-1]
coef
probit$coefficients
alice = c(12, 1, log(mean(bwght$faminc)))
alice = c(1, 12, 1, log(mean(bwght$faminc)))
predict(probit, alice)
alice = c(12, 1, log(mean(bwght$faminc)))
# b)
alice = c(12, 1, log(mean(bwght$faminc)))
beth = c(16, 1, log(mean(bwght$faminc)))
predict_smoke(alice, probit) - predict_smoke(beth, probit)
library(lmtest)
library(sandwich)
library(wooldridge)
library(stargazer)
predict_smoke <- function(parent, model) {
coefs <-  model$coefficients
pred <-  coefs[1] # Start with intercept
for (i in 1:length(parent)) {
pred <- pred + parent[i]*coefs[i+1]
}
return(pnorm(pred))
}
ape <- function(model, index) {
mean(dnorm(predict(model)))*model$coefficients[index]
}
prsq <- function(model, model0) {
return (1 - logLik(model) / logLik(model0))
}
# a)
bwght$smokes <- ifelse(bwght$cigs > 0, 1, 0)
model <- smokes ~ motheduc + white + log(faminc)
probit <- glm(model, family = binomial(link = "probit"), data=bwght)
stargazer(probit, type='latex')
summary(bwght)
mean(bwght["lfaminc"], na.rm=TRUE)
mean(bwght["lfaminc"])
mean(bwght$lfaminc)
library(lmtest)
library(sandwich)
library(wooldridge)
library(stargazer)
predict_smoke <- function(parent, model) {
coefs <-  model$coefficients
pred <-  coefs[1] # Start with intercept
for (i in 1:length(parent)) {
pred <- pred + parent[i]*coefs[i+1]
}
return(pnorm(pred))
}
ape <- function(model, index) {
mean(dnorm(predict(model)))*model$coefficients[index]
}
prsq <- function(model, model0) {
return (1 - logLik(model) / logLik(model0))
}
# a)
bwght$smokes <- ifelse(bwght$cigs > 0, 1, 0)
model <- smokes ~ motheduc + white + log(faminc)
probit <- glm(model, family = binomial(link = "probit"), data=bwght)
stargazer(probit, type='latex')
# b)
alice = c(12, 1, log(mean(bwght$faminc)))
beth = c(16, 1, log(mean(bwght$faminc)))
predict_smoke(alice, probit) - predict_smoke(beth, probit)
# c)
ape(probit, 4)
# d)
model0 <- smokes ~ 1
probit0 <- glm(model0, family = binomial(link = 'probit'), data=bwght)
prsq(probit, probit0)
qt(0.975, df = 110)
# Setup
setwd("/home/emmet/Documents/bayesian/bayesian_networks/data")
library(bnlearn)
library(parallel)
library(combinat)
library(Rgraphviz)
library(ggplot2)
library(reshape2)
library(ggplot2)
library(reshape2)
assignInNamespace("supported.clusters",
c("cluster", "MPIcluster",
"PVMcluster", "SOCKcluster"),
"bnlearn")
cl = makeCluster(4)
tests <- c(
'cor',
'mc-cor',
'smc-cor',
'zf',
'mc-zf',
'smc-zf',
'mi-g',
'mc-mi-g',
'smc-mi-g',
'mi-g-sh'
)
### Baseline RBC (iid shocks)
data <- read.csv('rbc.csv')
data <- as.data.frame(sapply(data, as.numeric))
wl <- names(data)
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
# Constraint Based
pc_model <- pc.stable(data, cluster = cl)
graphviz.plot(pc_model)
# Hybrid
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
root.nodes(hybrid_model)
hybrid_fitted <- bn.fit(hybrid_model, train)
# IRF
vars <- nodes(hybrid_model)
exo <- root.nodes(hybrid_model)
endo <- vars[!(vars %in% exo)]
std_z = 1
alpha_z = 0.97
irf_length = 120
irf <- data[1:irf_length,]
for (n in vars) {
irf[,n] <- 0
}
for (n in exo) {
irf[,n] <- 0
}
z_sim <- c(0, std_z)
for (i in 1:(irf_length-2)) {
z_sim <- c(z_sim, alpha_z * z_sim[length(z_sim)])
}
irf[,"z"] <- z_sim
irf[,"y"] <- predict(hybrid_fitted, "y", irf)
names(data)
irf[,"y"] <- predict(hybrid_fitted, "log_y", irf)
irf[,"i"] <- predict(hybrid_fitted, "log_i", irf)
irf[,"r"] <- predict(hybrid_fitted, "log_r", irf)
irf[,"r"] <- predict(hybrid_fitted, "r", irf)
irf[,"w"] <- predict(hybrid_fitted, "log_w", irf)
irf[,"c"] <- predict(hybrid_fitted, "log_c", irf)
# Problem with prediction: Does not always propogate predictions.
for (n in endo) {
for (i in 1:irf_length) {
irf[i,n] <- predict(pc_model, n, irf[i,])[1]
}
}
# Problem with prediction: Does not always propogate predictions.
for (n in endo) {
for (i in 1:irf_length) {
irf[i,n] <- predict(hybrid_fitted, n, irf[i,])[1]
}
}
irf$t <- 1:irf_length
irf = melt(irf, id=c("t"))
ggplot(irf) +
geom_point(aes(x = t, y = value, color=variable), size = 1)
### Baseline RBC (iid shocks)
# data <- read.csv('rbc.csv')
data <- read.csv('gali.csv')
names(data)
clear
clear()
data <- read.csv('rbc.csv')
# data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
wl <- names(data)
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
# Gali
# Smets and Wouters
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
# Add lags
# data$"k-1" <- c(NA, data$k[1:nrow(data)-1])
# data$"log_k-1" <- c(NA, data$log_k[1:nrow(data)-1])
# data <- data[2:nrow(data),]
# Split for holdout
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
# for(test in tests){
#   pc_model <- pc.stable(data, cluster = cl, test=test)
#   print(test)
#   print(root.nodes(pc_model))
# }
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
root.nodes(hybrid_model)
hybrid_fitted <- bn.fit(hybrid_model, train)
vars <- nodes(hybrid_model)
exo <- root.nodes(hybrid_model)
endo <- vars[!(vars %in% exo)]
std_z = 1
alpha_z = 0.97
irf_length = 120
irf <- data[1:irf_length,]
for (n in vars) {
irf[,n] <- 0
}
for (n in exo) {
irf[,n] <- 0
}
z_sim <- c(0, std_z)
for (i in 1:(irf_length-2)) {
z_sim <- c(z_sim, alpha_z * z_sim[length(z_sim)])
}
irf[,"z"] <- z_sim
# Problem with prediction: Does not always propogate predictions.
for (n in endo) {
for (i in 1:irf_length) {
irf[i,n] <- predict(hybrid_fitted, n, irf[i,])[1]
}
}
irf$t <- 1:irf_length
irf = melt(irf, id=c("t"))
ggplot(irf) +
geom_point(aes(x = t, y = value, color=variable), size = 1)
endo
vars
nodes(hybrid_model)
graphviz.plot(hybrid_model)
### Baseline RBC (iid shocks)
data <- read.csv('rbc.csv')
# data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
names(data)
### Baseline RBC (iid shocks)
data <- read.csv('rbc.csv')
# data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
wl <- names(data)
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
root.nodes(hybrid_model)
hybrid_fitted <- bn.fit(hybrid_model, train)
# Generate and IRF implied by the model
vars <- nodes(hybrid_model)
exo <- root.nodes(hybrid_model)
endo <- vars[!(vars %in% exo)]
std_z = 1
alpha_z = 0.97
irf_length = 120
irf <- data[1:irf_length,]
for (n in vars) {
irf[,n] <- 0
}
for (n in exo) {
irf[,n] <- 0
}
z_sim <- c(0, std_z)
for (i in 1:(irf_length-2)) {
z_sim <- c(z_sim, alpha_z * z_sim[length(z_sim)])
}
irf[,"z"] <- z_sim
# Problem with prediction: Does not always propogate predictions.
for (n in endo) {
for (i in 1:irf_length) {
irf[i,n] <- predict(hybrid_fitted, n, irf[i,])[1]
}
}
irf$t <- 1:irf_length
irf = melt(irf, id=c("t"))
ggplot(irf) +
geom_point(aes(x = t, y = value, color=variable), size = 1)
vars <- nodes(hybrid_model)
exo <- root.nodes(hybrid_model)
endo <- vars[!(vars %in% exo)]
std_z = 1
alpha_z = 0.97
irf_length = 120
irf <- data[1:irf_length,]
for (n in vars) {
irf[,n] <- 0
}
for (n in exo) {
irf[,n] <- 0
}
z_sim <- c(std_z)
for (i in 1:(irf_length-1)) {
z_sim <- c(z_sim, alpha_z * z_sim[length(z_sim)])
}
irf[,"z"] <- z_sim
# Problem with prediction: Does not always propogate predictions.
for (n in endo) {
for (i in 1:irf_length) {
irf[i,n] <- predict(hybrid_fitted, n, irf[i,])[1]
}
}
irf$t <- 1:irf_length
irf = melt(irf, id=c("t"))
ggplot(irf) +
geom_point(aes(x = t, y = value, color=variable), size = 1)
### Baseline RBC (iid shocks)
# data <- read.csv('rbc.csv')
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# Gali
wl <- names(data)
wl
data$Pi_star
wl
bl <- c('X', 'W_real', 'N', 'Z', 'Y', 'P', 'A', 'x_aux_1', 'x_aux_2', 'money_growth_ann', 'i_ann', 'pi_ann', 'r_real_ann')
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
### Baseline RBC (iid shocks)
# data <- read.csv('rbc.csv')
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
names(data)
# Gali
wl <- names(data)
bl <- c('X', 'w', 'n', 'z', 'y', 'p', 'a', 'x_aux_1', 'x_aux_2', 'money_growth_ann', 'i_ann', 'pi_ann', 'r_real_ann', 'realinterest')
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
data$s
bl <- c('X', 'w', 'n', 'z', 'y', 'p', 'a', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann', 'i_ann', 'pi_ann', 'r_real_ann', 'realinterest')
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
wl <- names(data)
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
# Gali
wl <- names(data)
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann', 'i_ann', 'pi_ann', 'r_real_ann', 'realinterest')
# Smets and Wouters
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a', 'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann', 'i_ann', 'pi_ann', 'r_real_ann', 'realinterest')
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
# Split for holdout
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
# Gali
wl <- names(data)
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest',
'eps_a', 'eps_m', 'eps_z')
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
# Split for holdout
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
data$w
data$p
plot(data$m_real)
names(data)
plot(data$c)
names(data)
### Baseline RBC (iid shocks)
# data <- read.csv('rbc.csv')
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
wl <- names(data)
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest')
data$"z-1" <- c(NA, data$z[1:nrow(data)-1])
data$"a-1" <- c(NA, data$a[1:nrow(data)-1])
data$"mg-1" <- c(NA, data$money_growth[1:nrow(data)-1])
data <- data[2:nrow(data),]
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
### Baseline RBC (iid shocks)
# data <- read.csv('rbc.csv')
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
# bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
# data$"log_k-1" <- c(NA, data$log_k[1:nrow(data)-1])
# data <- data[2:nrow(data),]
# wl <- names(data)
# Gali
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest')
data$"z-1" <- c(NA, data$z[1:nrow(data)-1])
data$"a-1" <- c(NA, data$a[1:nrow(data)-1])
data$"mg-1" <- c(NA, data$money_growth[1:nrow(data)-1])
data <- data[2:nrow(data),]
wl <- names(data)
# Smets and Wouters
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
# Gali
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest', 'm')
data <- data[2:nrow(data),]
wl <- names(data)
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
# bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
# data$"log_k-1" <- c(NA, data$log_k[1:nrow(data)-1])
# data <- data[2:nrow(data),]
# wl <- names(data)
# Gali
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest', 'm')
data$"z-1" <- c(NA, data$z[1:nrow(data)-1])
data$"a-1" <- c(NA, data$a[1:nrow(data)-1])
data$"mg-1" <- c(NA, data$money_growth[1:nrow(data)-1])
data <- data[2:nrow(data),]
wl <- names(data)
# Smets and Wouters
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
names(data)
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
# bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
# data$"log_k-1" <- c(NA, data$log_k[1:nrow(data)-1])
# data <- data[2:nrow(data),]
# wl <- names(data)
# Gali
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest',
'eps_z', 'eps_a', 'eps_m')
# data$"z-1" <- c(NA, data$z[1:nrow(data)-1])
# data$"a-1" <- c(NA, data$a[1:nrow(data)-1])
# data$"mg-1" <- c(NA, data$money_growth[1:nrow(data)-1])
# data <- data[2:nrow(data),]
wl <- names(data)
# Smets and Wouters
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
data <- read.csv('gali.csv')
# data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
# RBC
# bl <- c('log_y', 'log_k', 'log_c', 'log_l', 'log_w', 'log_i', 'X', 'eps_g', 'eps_z')
# bl <- c('y', 'k', 'c', 'l', 'w', 'i', 'X', 'eps_g', 'eps_z')
# bl <- c()
# data$"log_k-1" <- c(NA, data$log_k[1:nrow(data)-1])
# data <- data[2:nrow(data),]
# wl <- names(data)
# Gali
bl <- c('X', 'log_w', 'log_n', 'log_z', 'log_y', 'log_p', 'log_a',
'log_m_nominal', 's', 'x_aux_1', 'x_aux_2', 'money_growth_ann',
'i_ann', 'pi_ann', 'r_real_ann', 'realinterest', 'pi_star',
'eps_z', 'eps_a', 'eps_m')
# data$"z-1" <- c(NA, data$z[1:nrow(data)-1])
# data$"a-1" <- c(NA, data$a[1:nrow(data)-1])
# data$"mg-1" <- c(NA, data$money_growth[1:nrow(data)-1])
# data <- data[2:nrow(data),]
wl <- names(data)
# Smets and Wouters
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
data <- read.csv('sw.csv')
data <- as.data.frame(sapply(data, as.numeric))
names(data)
names(data)
# Smets and Wouters
bl <- c('X')
wl <- names(data)
data <- data[,colnames(data) %in% wl & !(colnames(data) %in% bl)]
# Split for holdout
train <- data[1:floor(0.8*nrow(data)),]
test <- data[(floor(0.8*nrow(data))+1):nrow(data),]
# Hybrid
hybrid_model <- rsmax2(data)
graphviz.plot(hybrid_model)
